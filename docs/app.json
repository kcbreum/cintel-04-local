[{"name": "app.py", "content": "# Import dependencies\nimport plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins\nfrom shiny import reactive, render, req\nimport seaborn as sns\nimport pandas as pd\n\n# Get the data\npenguins_df = palmerpenguins.load_penguins()\n\n# Define user interface\nui.page_opts(title=\"Penguin Data - Breum\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 30)\n    ui.input_slider(\n        \"seaborn_bin_count\",\n        \"Seaborn Bin Count\",\n        1,\n        100,\n        20,\n    )\n    ui.hr()\n    ui.a(\n        \"GitHub\",\n        href=\"https://github.com/kcbreum/cintel-02-data-kcbreum\",\n        target=\"_blank\",\n    )\n\n# Display data table\n\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Data Table\"):\n        @render.data_frame\n        def penguin_datatable():\n            return render.DataTable(filtered_data())\n\n# Display data grid\n    with ui.accordion_panel(\"Data Grid\"):\n        @render.data_frame\n        def penguin_datagrid():\n            return render.DataGrid(filtered_data())\n\n# Display Plotly histogram\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Histogram\"):\n\n        @render_plotly\n        def plotly_histogram():\n            plotly_hist = px.histogram(\n                data_frame=filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            ).update_layout(\n                title=\"Plotly Penguins Data\",\n                xaxis_title=\"Selected Attribute\",\n                yaxis_title=\"Count\",\n            )\n            return plotly_hist\n\n# Display Seaborn histogram    \n    with ui.nav_panel(\"Seaborn Histogram\"):\n        @render.plot\n        def seaborn_histogram():\n            histplot = sns.histplot(data=filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count())\n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_xlabel(\"Mass\")\n            histplot.set_ylabel(\"Count\")\n            return histplot\n\n# Display Plotly Scatterplot\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(filtered_data(),\n            title=\"Penguin Species\",\n            x=\"flipper_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            size_max=8,\n            labels={\"flipper_length_mm\": \"Flipper Length (mm)\", \"body_mass_g\": \"Body Mass (g)\"})\n\n# Reactive calculations and effects\n@reactive.calc\n@reactive.calc\ndef filtered_data():\n    selected_attribute = input.selected_attribute()\n    selected_species_list = input.selected_species_list()\n    isSpeciesMatch = penguins_df[\"species\"].isin(selected_species_list)\n    filtered_df = penguins_df[isSpeciesMatch]\n    return filtered_df\n", "type": "text"}]